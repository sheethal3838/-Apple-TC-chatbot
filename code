!pip install ipywidgets
!pip install IPython
!pip install pyPDF2
!pip install langchain
!pip install sentence_transformers
!pip install faiss-cpu
!pip install transformers

import PyPDF2
from langchain.text_splitter import RecursiveCharacterTextSplitter
from sentence_transformers import SentenceTransformer
import numpy as np
import faiss
from transformers import pipeline
import ipywidgets as widgets
from IPython.display import display

# Load the PDF
def load_pdf(file_path):
    with open(file_path, 'rb') as pdf_file:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page_num in range(len(pdf_reader.pages)):
            page = pdf_reader.pages[page_num]
            text += page.extract_text()
    return text

# Split text into chunks
def split_text_into_chunks(text):
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,       
        chunk_overlap=200,     
    )
    return text_splitter.split_text(text)

# Initialize model and create FAISS index
def setup_faiss_index(chunks):
    model = SentenceTransformer('all-MiniLM-L6-v2')
    embeddings = model.encode(chunks, show_progress_bar=True)
    embeddings_np = np.array(embeddings)
    embedding_dimension = embeddings_np.shape[1]

    index = faiss.IndexFlatL2(embedding_dimension)
    index.add(embeddings_np)

    return index, model, chunks

# Perform query and summarize with input length limit
def query_and_summarize(query, index, model, chunks):
    query_embedding = model.encode([query]).astype('float32')
    k = 5
    distances, indices = index.search(query_embedding, k)

    retrieved_text = ""
    for i in range(k):
        chunk_id = indices[0][i]
        chunk_text = chunks[chunk_id]
        retrieved_text += chunk_text + " "

    # Truncate text to 1024 tokens to avoid model errors
    max_input_length = 1024
    if len(retrieved_text) > max_input_length:
        retrieved_text = retrieved_text[:max_input_length]

    summarizer = pipeline("summarization", model="sshleifer/distilbart-cnn-12-6")
    summary = summarizer(retrieved_text, max_length=150, min_length=50, do_sample=False)
    return summary[0]['summary_text']

# UI Elements using IPyWidgets
query_input = widgets.Text(
    value='',
    placeholder='Enter your query here',
    description='Query:',
    disabled=False
)

output_area = widgets.Textarea(
    value='',
    placeholder='Summary will be displayed here',
    description='Bot:',
    disabled=False
)

run_button = widgets.Button(description="Run Query")

# Function to handle query when button is clicked
def on_button_click(b):
    # Load and process the PDF
    pdf_file_path = "/content/apple agreement.pdf"  # Set the path to your PDF
    pdf_text = load_pdf(pdf_file_path)
    chunks = split_text_into_chunks(pdf_text)
    index, model, chunks = setup_faiss_index(chunks)

    # Get the query from the input box
    query = query_input.value
    summary = query_and_summarize(query, index, model, chunks)

    # Display the summary in the output area
    output_area.value = summary

# Attach the function to button click
run_button.on_click(on_button_click)

# Display the UI elements
display(query_input, run_button, output_area)
